?log
log2(.5)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
faces <- c("Ace", as.character(seq(2,10)), "Jack", "Queen", "King")
values <- rep( c(seq(1,9), rep(10,4)), 4)
deck <- data.frame(cards=c(paste0(faces," of spades"), paste0(faces," of hearts"), paste0(faces," of diamonds"), paste0(faces," of clubs")), values=rep( c(seq(1,9), rep(10,4)), 4), stringsAsFactors=FALSE)
ggplot(deck, aes(x=values)) +
geom_histogram(binwidth=1, origin=-0.5, col="red", fill="royalblue", alpha=0.5) +
labs(x="Value", y="Count", title="Card Value Histogram") +
scale_x_continuous(breaks = seq(1,10), limits=c(0.5,10.5)) +
scale_y_continuous(breaks = seq(0,16,4))
ggplot(deck, aes(x=values)) +
geom_histogram(binwidth=1, boundry=-0.5, col="red", fill="royalblue", alpha=0.5) +
labs(x="Value", y="Count", title="Card Value Histogram") +
scale_x_continuous(breaks = seq(1,10), limits=c(0.5,10.5)) +
scale_y_continuous(breaks = seq(0,16,4))
ggplot(deck, aes(x=values)) +
geom_histogram(binwidth=1, boundary=-0.5, col="red", fill="royalblue", alpha=0.5) +
labs(x="Value", y="Count", title="Card Value Histogram") +
scale_x_continuous(breaks = seq(1,10), limits=c(0.5,10.5)) +
scale_y_continuous(breaks = seq(0,16,4))
m <- 3
n <- 10000
samples <- data.frame(matrix(nrow=n, ncol=m+1))
colnames(samples) <- c(paste0("card", seq(1:m)), "sum")
set.seed(1)
for(s in seq(1,n)){
pick_m <- sample(52,m)
samples[s,1:m] <- deck$cards[pick_m]
samples$sum[s] <-sum(deck$values[pick_m])
}
write.csv(samples,"samples.csv")
ggplot(samples, aes(x=sum)) +
geom_histogram(binwidth=1, col="red", fill="royalblue", alpha=0.5) +
labs(x="Sum of 3 Cards", y="Count", title=sprintf("3 Card Sum Histogram (n = %d)",n)) +
scale_x_continuous(breaks = seq(3,30,3), limits=c(3,30))
sample1 = read.csv("samples.csv")
summary(sample1$sum)
boxplot(sample1$sum)
ggplot(samples, aes(x=sum)) +
geom_histogram(binwidth=1, col="red", fill="royalblue", alpha=0.5) +
labs(x="Sum of 3 Cards", y="Count", title=sprintf("3 Card Sum Histogram (n = %d)",n)) +
scale_x_continuous(breaks = seq(3,30,3), limits=c(3,30))
mu = 19.65
SE = 5.34
zv5 = -1.64
zv95 = 1.65
x5 = mu + zv5 * SE
x95 = mu + zv95 * SE
x5
x95
xi = 20
zv_at_x20 = (20 - mu) / SE
zv_at_x20
1 - 0.5279
knitr::opts_chunk$set(echo = TRUE)
Quality = read.csv("quality.csv")
str(Quality)
table(Quality$PoorCare)
baseline = 98/nrow(Quality)
baseline
QualityFilter = Quality[Quality$PoorCare==1,] # Stores which observations had good care
plot(Quality$OfficeVisits, Quality$Narcotics, pch=20, cex=2, col="green") # plots all observations in green
points(QualityFilter$OfficeVisits, QualityFilter$Narcotics, col="red", pch=20, cex=2) # plots all observations that had good care in red
plot(Quality$OfficeVisits, Quality$Narcotics, pch=20, cex=2, col="green") # plots all observations in green
points(QualityFilter$OfficeVisits, QualityFilter$Narcotics, col="red", pch=20, cex=2) # plots all observations that had good care in red
library(caTools)
set.seed(88)
spl = sample.split(Quality$PoorCare, SplitRatio = 0.75)
QualityTrain = subset(Quality, spl==TRUE)
QualityTest = subset(Quality, spl==FALSE)
QualityModel = glm(PoorCare ~ ERVisits + OfficeVisits + Narcotics + ProviderCount + MedicalClaims + StartedOnCombination, data = QualityTrain, family=binomial)
summary(QualityModel)
PredictTrain = predict(QualityModel, type="response") #type="response" gives us probabilities
summary(PredictTrain) # since we are dealing with probabilities, all the nos will be between 0 & 1
tapply(PredictTrain, QualityTrain$PoorCare, mean) #avg prediction for each of the TRUE outcomes
table(QualityTrain$PoorCare, PredictTrain > 0.5)
table(QualityTrain$PoorCare, PredictTrain > 0.7)
table(QualityTrain$PoorCare, PredictTrain > 0.2)
library(ROCR)
ROCRpred = prediction(PredictTrain, QualityTrain$PoorCare)
ROCCurve = performance(ROCRpred, "tpr", "fpr")
plot(ROCCurve, colorize=TRUE, print.cutoffs.at=seq(0,1,0.1), text.adj=c(-0.2,0.7))
as.numeric(performance(ROCRpred, "auc")@y.values)
PredictTest = predict(QualityModel, type="response", newdata=QualityTest)
table(QualityTest$PoorCare, PredictTest > 0.5)
(23 + 5) / nrow(QualityTest)
loanTrain = read.csv("loan-prediction-train.csv")
str(loanTrain)
library(rpart)
library(rpart.plot)
library(randomForest)
summary(loanTrain)
hist(loanTrain$LoanAmount)
boxplot(loanTrain$LoanAmount)
boxplot(loanTrain$LoanAmount, loanTrain$Education)
table(loanTrain$LoanAmount, loanTrain$Education)
plot(loanTrain$LoanAmount, loanTrain$Education)
table(loanTrain$Education, loanTrain$Credit_History)
table(loanTrain$Loan_Status, loanTrain$Credit_History)
table(loanTrain$Credit_History)
nch = loanTrain[is.na(loanTrain$Credit_History)]
nch = subset(loanTrain, is.na(loanTrain$Credit_History))
summary(nch)
table(loanTrain$Married, loanTrain$Education, loanTrain$Credit_History)
table(loanTrain$Credit_History, loanTrain$Married, loanTrain$Education)
table(loanTrain$Gender, loanTrain$Married)
setwd("C:/home/tutorial/ml/analytics-edge")
install.packages("SDFoundations")
install.packages("SDFoundations")
setwd("C:/home/presentations/ml-jaxjug")
